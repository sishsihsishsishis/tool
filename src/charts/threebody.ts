import { EChartsOption, LinesSeriesOption, XAXisComponentOption, YAXisComponentOption } from "echarts";
import color from "./template/color";

// let data = {
//   "individual_sync_value":{
//     "user00":[[0,0.152017291],[30000,-0.051947672],[60000,0.056149522],[90000,0.109898303],[120000,0.041043798],[150000,0.006625671],[180000,0.063425032],[210000,-0.124567405],[240000,-0.232203261],[270000,-0.127318004],[300000,-0.06804927],[330000,0.110911019],[360000,0.171376194],[390000,-0.331904531],[420000,0.250605241],[450000,-0.109824173],[480000,-0.030317555],[510000,-0.026668214],[540000,0.126353901],[570000,-0.122876364],[600000,0.230853515],[630000,0.092940991],[660000,-0.047151456],[690000,-0.002464962],[720000,-0.024213866],[750000,0.017437355],[780000,0.167395326],[810000,0.07296849],[840000,-0.079414524]],
//     "user10":[[0,0.034115699],[30000,-0.328136571],[60000,0.118981831],[90000,0.004161099],[120000,-0.018924564],[150000,-0.146734674],[180000,-0.037134404],[210000,-0.158217125],[240000,-0.138184569],[270000,0.078092877],[300000,0.11186679],[330000,0.195789886],[360000,0.123389301],[390000,-0.325656689],[420000,0.325716443],[450000,-0.224162274],[480000,-0.028097887],[510000,-0.027605646],[540000,0.033050431],[570000,0.010796853],[600000,0.129617693],[630000,-0.212289159],[660000,0.090056507],[690000,-0.037190835],[720000,-0.063908689],[750000,0.172420128],[780000,-0.033605901],[810000,0.044992085],[840000,0.178359205]],
//     "user01":[[0,0.086996807],[30000,-0.169661274],[60000,-0.080610645],[90000,-0.130768616],[120000,-0.075358221],[150000,0.019816206],[180000,0.005363091],[210000,-0.06447646],[240000,-0.060520152],[270000,0.167297218],[300000,0.140752077],[330000,0.214980527],[360000,0.014384923],[390000,-0.053145863],[420000,0.210865162],[450000,-0.285217623],[480000,0.225416094],[510000,0.022599782],[540000,-0.133209597],[570000,-0.020854834],[600000,0.167155434],[630000,-0.372682992],[660000,-0.116796345],[690000,0.078578533],[720000,0.059503169],[750000,-0.099036077],[780000,0.135075847],[810000,0.056993856],[840000,0.092096571]],
//   },
//   "distance":{
//     "user00":[[0,0.858973428],[30000,1.053320623],[60000,0.945397768],[90000,0.895925244],[120000,0.959787093],[150000,0.99339623],[180000,0.938544477],[210000,1.132658365],[240000,1.261376092],[270000,1.135778143],[300000,1.070418047],[330000,0.895018385],[360000,0.842504568],[390000,1.393619795],[420000,0.778329564],[450000,1.116081816],[480000,1.030781812],[510000,1.027026994],[540000,0.881302897],[570000,1.130744612],[600000,0.793855746],[630000,0.911247271],[660000,1.048280765],[690000,1.002468003],[720000,1.024509402],[750000,0.982713796],[780000,0.845865153],[810000,0.929630122],[840000,1.082653015]],
//     "user10":[[0,0.96645968],[30000,1.388378572],[60000,0.887823932],[90000,0.995847546],[120000,1.019104769],[150000,1.158046662],[180000,1.0378325],[210000,1.171420512],[240000,1.14818745],[270000,0.924878523],[300000,0.894163361],[330000,0.822184969],[360000,0.883919485],[390000,1.384939822],[420000,0.722009889],[450000,1.251274052],[480000,1.028496356],[510000,1.027990212],[540000,0.967489767],[570000,0.989261224],[600000,0.878431197],[630000,1.23650538],[660000,0.913879543],[690000,1.037891068],[720000,1.065995057],[750000,0.841625508],[780000,1.034176959],[810000,0.956005049],[840000,0.836641843]],
//     "user01":[[0,0.916680023],[30000,1.184903426],[60000,1.083948774],[90000,1.139704042],[120000,1.078270341],[150000,0.980378845],[180000,0.994651265],[210000,1.06660047],[240000,1.062389006],[270000,0.845948143],[300000,0.868704657],[330000,0.806557146],[360000,0.985718045],[390000,1.054583459],[420000,0.809883262],[450000,1.330051446],[480000,0.79818403],[510000,0.97765368],[540000,1.142489435],[570000,1.021073816],[600000,0.846068094],[630000,1.45162409],[660000,1.123890521],[690000,0.924429459],[720000,0.942232548],[750000,1.104106132],[780000,0.873649646],[810000,0.944599873],[840000,0.912017071]],
//   },
//   "rate":{
//     "user00":[[0,0.353878107],[30000,0.377697675],[60000,0.340480283],[90000,0.372333469],[120000,0.353118362],[150000,0.348298747],[180000,0.351133106],[210000,0.330159046],[240000,0.30433231],[270000,0.280061901],[300000,0.291603249],[330000,0.312669743],[360000,0.356143392],[390000,0.30050282],[420000,0.32905093],[450000,0.366155093],[480000,0.303616297],[510000,0.327915637],[540000,0.372813647],[570000,0.307651929],[600000,0.351863877],[630000,0.422887156],[660000,0.324697289],[690000,0.327837873],[720000,0.328040523],[750000,0.327044102],[780000,0.358923548],[810000,0.338230506],[840000,0.287261947]],
//     "user10":[[0,0.314521026],[30000,0.286547746],[60000,0.362559836],[90000,0.334973918],[120000,0.332564871],[150000,0.298777825],[180000,0.31754068],[210000,0.319234128],[240000,0.334333474],[270000,0.343924286],[300000,0.34908317],[330000,0.340367653],[360000,0.339456749],[390000,0.302386192],[420000,0.354718226],[450000,0.326594355],[480000,0.304290972],[510000,0.327608382],[540000,0.339602297],[570000,0.351652074],[600000,0.317986384],[630000,0.311648273],[660000,0.372449438],[690000,0.316648816],[720000,0.31527407],[750000,0.381869071],[780000,0.293567672],[810000,0.328899169],[840000,0.371730168]],
//     "user01":[[0,0.331600867],[30000,0.335754579],[60000,0.296959881],[90000,0.292692613],[120000,0.314316766],[150000,0.352923428],[180000,0.331326214],[210000,0.350606826],[240000,0.361334216],[270000,0.376013812],[300000,0.359313581],[330000,0.346962604],[360000,0.304399859],[390000,0.397110988],[420000,0.316230843],[450000,0.307250552],[480000,0.392092731],[510000,0.344475981],[540000,0.287584057],[570000,0.340695997],[600000,0.330149739],[630000,0.265464571],[660000,0.302853273],[690000,0.355513311],[720000,0.356685407],[750000,0.291086827],[780000,0.34750878],[810000,0.332870325],[840000,0.341007885]]
//   }
// }
// let {individual_sync_value:sync,distance,rate} = data

const offsetSum = 4.5
const offset = {
  "sync":3.5,
  "distance":1,
  "rate":0
}

let syncOpt: (sync:any)=>EChartsOption = (sync) => ({
  xAxis: {
    type: 'time',
    axisLine:{
      show:true,
      onZero:true,
      lineStyle:{
        width:1.2,
        color:'#000'
      }
    },
  },
  yAxis: {
    id:'sync',
    name: 'individual sync value',
    show: true,
    type: 'value',
    max:offsetSum-offset.sync,
    min:-offset.sync,
    axisLine:{
      show:true,
    },
    splitLine:{
      show:false // 不显示网格线
    },
    axisTick:{
      show:true
    },
    axisLabel:{
      formatter: (value: number, index: number) => value >= 2 || value <= -1 ? '' : value.toString()
    }
  },
  series: Object.keys(sync).map(e=>({
      name: e,
      type: 'line',
      smooth: true,
      yAxisId:'sync',
      symbol: 'none',
      data: sync[e],
      color:color[e], 
      sampling: 'lttb',
      zlevel:-99,
    })
  )
})


let distanceOpt : (distance:any)=>EChartsOption = (distance) => ({
  xAxis: {
    type: 'time',
    axisLine:{
      show:true,
      onZero:true,
      onZeroAxisIndex:1,
      lineStyle:{
        width:1.2,
        color:'#000'
      }
    },
  },
  yAxis:{
    id:'distance',
    show: true,
    type: 'value',
    name: 'distance',
    // nameLocation: 'start',
    // min:-0.5,
    max:offsetSum-offset.distance,
    min:-offset.distance,
    axisLine:{
      show:true,
      symbol:['none','arrow'],
      symbolSize:[6, 8],
      symbolOffset:[0, 10]
    },
    splitLine:{
      show:false // 不显示网格线
    },
    axisTick:{
      show:true,
      inside:false
    },
    axisLabel:{
      formatter: (value: number, index: number) => value >= 3 || value <= -1 ? '' : value.toString()
    },
    // inverse: true,      
  },
  series: Object.keys(distance).map(e=>({
    name: e,
    type: 'line',
    smooth: false,
    yAxisId:'distance',
    symbol: 'none',
    data: distance[e],
    color:color[e], 
    sampling: 'lttb',
  
    zlevel:-99,
    markLine:{
      symbol:['none','arrow'],
      symbolSize:[4,10],
      data:distance[e].map(i=>([{coord: [i[0],0]},{coord: [i[0], i[1]]}]))
    }
  })
),
})

let rateOpt: (rate:any)=>EChartsOption = (rate) => ({
  xAxis: {
    type: 'time',
    axisLine:{
      show:false,
    },
  },
  yAxis: {
    name: 'rate',
    nameLocation:'start',
    nameTextStyle:{
      align:'right',
      verticalAlign:'top',
      padding:[-24,20,0,0]
    },
    id:'rate',
    show: true,
    type: 'value',
    position:'left',
    max:offsetSum,
    min:offset.rate,
    axisLine:{
      show:true,
      onZero:true,
      onZeroAxisIndex:0,
      lineStyle:{
        width:1.2,
        color:'#000'
      }
    },
    splitLine:{
      show:false // 不显示网格线
    },
    axisTick:{
      show:true
    },
    axisLabel:{
      color:'#12aadd',
      fontWeight:'bold',
      formatter: (value: number, index: number) => value > 1 ? '' : value.toString()
    },
    offset:0
  },
  series: Object.keys(rate).map(e => ({
      name: e,
      type: 'line',
      yAxisId:'rate',
      smooth: true,
      symbol: 'none',
      data: rate[e],
      color:color[e],
      sampling: 'lttb',
      stack:"true",
      areaStyle: {
        opacity:0.75,
      },
      markLine:{
        symbol:['none','none'],
        data:[[{coord:[0,1]},{coord: [840000, 1]}]]
      }
    })
  )
})


export async function tb ({time , distance, rate, individual_sync_value}:{time:Promise<any> , distance:Promise<any>, rate:Promise<any>, individual_sync_value:Promise<any>}) {
  let sync_opt = syncOpt(await individual_sync_value)
  let distance_opt = distanceOpt(await distance)
  let rate_opt = rateOpt(await rate)
  const opt: EChartsOption = {
    grid: {
      top: 60,
      left: 100,
      right: 100,
      bottom: 60
    },
    tooltip: {},
    legend: {
      data: Object.keys(await individual_sync_value).sort()
    },
    xAxis:[
      sync_opt.xAxis as XAXisComponentOption,
      distance_opt.xAxis as XAXisComponentOption,
      rate_opt.xAxis as XAXisComponentOption
    ],
    yAxis:[
      sync_opt.yAxis as YAXisComponentOption,
      distance_opt.yAxis as YAXisComponentOption,
      rate_opt.yAxis as YAXisComponentOption
    ],
    series:[
      ...sync_opt.series as LinesSeriesOption[],
      ...distance_opt.series as LinesSeriesOption[],
      ...rate_opt.series as LinesSeriesOption[]
    ],
  }
  return opt
}